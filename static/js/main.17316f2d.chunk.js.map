{"version":3,"sources":["App.tsx","components/TodoList/TodoList.tsx","api/api.ts","components/CurrentUser/CurrentUser.tsx","index.tsx"],"names":["TodoStatus","TodoList","onSelect","userId","todos","className","map","todo","classNames","completed","htmlFor","id","type","readOnly","checked","title","onClick","getData","endpoint","fetch","then","response","ok","Error","json","CurrentUser","onClear","useState","user","setUser","hasDataError","setHasDataError","hasDataLoaded","setHasDataLoaded","useEffect","getUser","catch","name","email","phone","App","selectedUserId","setSelectedUserId","setTodos","hasLoadingError","setHasLoadingError","query","setQuery","selectValue","setSelectValue","onChange","event","target","value","placeholder","loweredQuery","toLowerCase","filteredTodosByInput","filter","includes","Active","Completed","prepearedTodos","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.17316f2d.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api/api';\n\nenum TodoStatus {\n  Active = 'active',\n  Completed = 'completed',\n}\n\nconst App: React.FC = () => {\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [hasLoadingError, setHasLoadingError] = useState(false);\n  const [hasDataLoaded, setHasDataLoaded] = useState(false);\n\n  useEffect(() => {\n    getTodos()\n      .then(setTodos)\n      .then(() => setHasDataLoaded(true))\n      .catch(() => {\n        setHasLoadingError(true);\n        setHasDataLoaded(true);\n      });\n  }, []);\n\n  const [query, setQuery] = useState('');\n  const [selectValue, setSelectValue] = useState('');\n\n  const prepearedTodos = () => {\n    const loweredQuery = query.toLowerCase();\n\n    const filteredTodosByInput = todos.filter(todo => (\n      todo.title.toLowerCase().includes(loweredQuery)\n    ));\n\n    switch (selectValue) {\n      case TodoStatus.Active:\n        return filteredTodosByInput.filter(todo => !todo.completed);\n      case TodoStatus.Completed:\n        return filteredTodosByInput.filter(todo => todo.completed);\n\n      default:\n        return filteredTodosByInput;\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        {(!hasLoadingError && hasDataLoaded) && (\n          <>\n            <input\n              type=\"text\"\n              onChange={(event) => setQuery(event.target.value)}\n              placeholder=\"filter the todos by title\"\n            />\n\n            <select\n              id=\"select\"\n              onChange={(event) => setSelectValue(event.target.value)}\n              value={selectValue}\n            >\n              <option value=\"all\">\n                All\n              </option>\n\n              <option value=\"active\">\n                Active\n              </option>\n\n              <option value=\"completed\">\n                Completed\n              </option>\n            </select>\n\n            <TodoList\n              onSelect={setSelectedUserId}\n              userId={selectedUserId}\n              todos={prepearedTodos()}\n            />\n          </>\n        )}\n\n        {hasLoadingError && hasDataLoaded && (\n          'Unable to load the data'\n        )}\n\n        {!hasDataLoaded && (\n          'Loading...'\n        )}\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUserId ? (\n            <CurrentUser userId={selectedUserId} onClear={setSelectedUserId} />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport classNames from 'classnames';\n\nimport './TodoList.scss';\n\ntype Props = {\n  onSelect: (userId: number) => void,\n  userId: number,\n  todos: Todo[],\n};\n\nexport const TodoList: React.FC<Props> = ({\n  onSelect,\n  userId,\n  todos,\n}) => {\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n      <div className=\"TodoList__list-container\">\n        <ul className=\"TodoList__list\">\n          {\n            todos.map(todo => (\n              <li\n                className={classNames(\n                  'TodoList__item',\n                  {\n                    'TodoList__item--unchecked': !todo.completed,\n                    'TodoList__item--checked': todo.completed,\n                  },\n                )}\n                key={todo.id}\n              >\n                <label htmlFor={`${todo.id}`}>\n                  <input\n                    id={`${todo.id}`}\n                    type=\"checkbox\"\n                    readOnly\n                    checked={todo.completed}\n                  />\n                  <p>{todo.title}</p>\n                </label>\n                <button\n                  className={classNames(\n                    'TodoList__user-button',\n                    'button',\n                    { 'TodoList__user-button--selected': todo.userId === userId },\n                  )}\n                  type=\"button\"\n                  onClick={() => onSelect(todo.userId)}\n                >\n                  {`User #${todo.userId}`}\n                </button>\n              </li>\n            ))\n          }\n        </ul>\n      </div>\n    </div>\n  );\n};\n","const API_URL = 'https://mate.academy/students-api/';\n\nconst getData = (endpoint: string) => {\n  return fetch(`${API_URL}/${endpoint}`)\n    .then(response => {\n      if (!response.ok) {\n        throw new Error();\n      }\n\n      return response.json();\n    });\n};\n\nexport const getTodos = (): Promise<Todo[]> => getData('todos');\n\nexport const getUser = (userId: number): Promise<User> => getData(`users/${userId}`);\n","import React, { useState, useEffect } from 'react';\nimport { getUser } from '../../api/api';\nimport './CurrentUser.scss';\n\ntype Props = {\n  userId: number,\n  onClear: (userId: number) => void,\n};\n\nexport const CurrentUser: React.FC<Props> = ({ userId, onClear }) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [hasDataError, setHasDataError] = useState(false);\n  const [hasDataLoaded, setHasDataLoaded] = useState(false);\n\n  useEffect(() => {\n    getUser(userId)\n      .then(setUser)\n      .then(() => setHasDataLoaded(true))\n      .catch(() => {\n        setHasDataError(true);\n        setHasDataLoaded(true);\n      });\n  }, [userId]);\n\n  return (\n    <>\n      {(!hasDataError && hasDataLoaded) && (\n        <div className=\"CurrentUser\">\n          <h2 className=\"CurrentUser__title\"><span>{`Selected user: ${user?.id}`}</span></h2>\n\n          <h3 className=\"CurrentUser__name\">{user?.name}</h3>\n          <p className=\"CurrentUser__email\">{user?.email}</p>\n          <p className=\"CurrentUser__phone\">{user?.phone}</p>\n          <button\n            type=\"button\"\n            onClick={() => onClear(0)}\n          >\n            Clear\n          </button>\n        </div>\n      )}\n\n      <div>\n        {(hasDataError && hasDataLoaded) && (\n          <div>\n            Unable to load the data\n          </div>\n\n        )}\n\n        {!hasDataLoaded && (\n          <div>\n            Loading...\n          </div>\n        )}\n      </div>\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}